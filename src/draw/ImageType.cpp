#include "ImageType.hpp"
#include "elements/Map/Map.hpp"
#include "iostream"
#include "rsdl.hpp"
using namespace std;

/*Corresponding blink of image*/
static const map<int, int> blink_img = {
    {SELECTOR_DIRECTORY, SELECTOR_BLINK_DIRECTORY},
    {BUTTON_DIRECTORY, BUTTON_BLINK_DIRECTORY},
    {BACK_TO_GAME_BUTTON_DIRECTORY, BACK_TO_GAME_BUTTON_BLINK_DIRECTORY},

    {PEASHOOTER_SHEET_DIRECTORY, PEASHOOTER_SHEET_BLINK_DIRECTORY},
    {PEASHOOTER_ATTACK_DIRECTORY, PEASHOOTER_ATTACK_BLINK_DIRECTORY},

    {SUNFLOWER_SHEET_DIRECTORY, SUNFLOWER_SHEET_BLINK_DIRECTORY},
    {SUNFLOWER_HAPPY_DIRECTORY, SUNFLOWER_HAPPY_BLINK_DIRECTORY},

    {WALLNUT_1_DIRECTORY, WALLNUT_1_BLINK_DIRECTORY},
    {WALLNUT_2_DIRECTORY, WALLNUT_2_BLINK_DIRECTORY},
    {WALLNUT_3_DIRECTORY, WALLNUT_3_BLINK_DIRECTORY},
    {WALLNUT_4_DIRECTORY, WALLNUT_4_BLINK_DIRECTORY},
    {WALLNUT_5_DIRECTORY, WALLNUT_5_BLINK_DIRECTORY},

    {SNOWPEA_SHEET_DIRECTORY, SNOWPEA_SHEET_BLINK_DIRECTORY},
    {SNOWPEA_ATTACK_DIRECTORY, SNOWPEA_ATTACK_BLINK_DIRECTORY},

    {CHERRYBOMB_SHEET_DIRECTORY, CHERRYBOMB_SHEET_BLINK_DIRECTORY},

    {POTATOMINE_UNARMED_DIRECTORY, POTATOMINE_UNARMED_BLINK_DIRECTORY},
    {POTATOMINE_RECOVER_DIRECTORY, POTATOMINE_RECOVER_BLINK_DIRECTORY},

    {ZOMBIE_WALK1_DIRECTORY, ZOMBIE_WALK1_BLINK_DIRECTORY},
    {ZOMBIE_WALK2_DIRECTORY, ZOMBIE_WALK2_BLINK_DIRECTORY},
    {ZOMBIE_EATING_DIRECTORY, ZOMBIE_EATING_BLINK_DIRECTORY},

    {ZOMBIE_ARM_DIRECTORY, ZOMBIE_ARM_BLINK_DIRECTORY},
    {ARMLESS_ZOMBIE_WALK1_DIRECTORY, ARMLESS_ZOMBIE_WALK1_BLINK_DIRECTORY},
    {ARMLESS_ZOMBIE_WALK2_DIRECTORY, ARMLESS_ZOMBIE_WALK2_BLINK_DIRECTORY},
    {ARMLESS_ZOMBIE_EATING_DIRECTORY, ARMLESS_ZOMBIE_EATING_BLINK_DIRECTORY},

    {ZOMBIE_HEAD_DIRECTORY, ZOMBIE_HEAD_BLINK_DIRECTORY},
    {ZOMBIE_DIE1_DIRECTORY, ZOMBIE_DIE1_BLINK_DIRECTORY},
    {ZOMBIE_DIE2_DIRECTORY, ZOMBIE_DIE2_BLINK_DIRECTORY},

    {FLAG_ZOMBIE_WALK1_1_DIRECTORY, FLAG_ZOMBIE_WALK1_1_BLINK_DIRECTORY},
    {FLAG_ZOMBIE_WALK1_2_DIRECTORY, FLAG_ZOMBIE_WALK1_2_BLINK_DIRECTORY},
    {FLAG_ZOMBIE_WALK1_3_DIRECTORY, FLAG_ZOMBIE_WALK1_3_BLINK_DIRECTORY},
    {FLAG_ZOMBIE_WALK2_1_DIRECTORY, FLAG_ZOMBIE_WALK2_1_BLINK_DIRECTORY},
    {FLAG_ZOMBIE_WALK2_2_DIRECTORY, FLAG_ZOMBIE_WALK2_2_BLINK_DIRECTORY},
    {FLAG_ZOMBIE_WALK2_3_DIRECTORY, FLAG_ZOMBIE_WALK2_3_BLINK_DIRECTORY},
    {FLAG_ZOMBIE_EATING_1_DIRECTORY, FLAG_ZOMBIE_EATING_1_BLINK_DIRECTORY},
    {FLAG_ZOMBIE_EATING_2_DIRECTORY, FLAG_ZOMBIE_EATING_2_BLINK_DIRECTORY},
    {FLAG_ZOMBIE_EATING_3_DIRECTORY, FLAG_ZOMBIE_EATING_3_BLINK_DIRECTORY},

    {CONE_DROP_DIRECTORY, CONE_DROP_BLINK_DIRECTORY},
    {CONE1_DIRECTORY, CONE1_BLINK_DIRECTORY},
    {CONE2_DIRECTORY, CONE2_BLINK_DIRECTORY},
    {CONE3_DIRECTORY, CONE3_BLINK_DIRECTORY},

    {BUCKET_DROP_DIRECTORY, BUCKET_DROP_BLINK_DIRECTORY},
    {BUCKET1_DIRECTORY, BUCKET1_BLINK_DIRECTORY},
    {BUCKET2_DIRECTORY, BUCKET2_BLINK_DIRECTORY},
    {BUCKET3_DIRECTORY, BUCKET3_BLINK_DIRECTORY},

    {DOOR_ZOMBIE_WALK1_1_DIRECTORY, DOOR_ZOMBIE_WALK1_1_BLINK_DIRECTORY},
    {DOOR_ZOMBIE_WALK1_2_DIRECTORY, DOOR_ZOMBIE_WALK1_2_BLINK_DIRECTORY},
    {DOOR_ZOMBIE_WALK1_3_DIRECTORY, DOOR_ZOMBIE_WALK1_3_BLINK_DIRECTORY},
    {DOOR_ZOMBIE_WALK2_1_DIRECTORY, DOOR_ZOMBIE_WALK2_1_BLINK_DIRECTORY},
    {DOOR_ZOMBIE_WALK2_2_DIRECTORY, DOOR_ZOMBIE_WALK2_2_BLINK_DIRECTORY},
    {DOOR_ZOMBIE_WALK2_3_DIRECTORY, DOOR_ZOMBIE_WALK2_3_BLINK_DIRECTORY},
    {DOOR_ZOMBIE_EATING_1_DIRECTORY, DOOR_ZOMBIE_EATING_1_BLINK_DIRECTORY},
    {DOOR_ZOMBIE_EATING_2_DIRECTORY, DOOR_ZOMBIE_EATING_2_BLINK_DIRECTORY},
    {DOOR_ZOMBIE_EATING_3_DIRECTORY, DOOR_ZOMBIE_EATING_3_BLINK_DIRECTORY}

};

/*Corresponding eating of zombie walk image*/
static const map<int, int> eat_img = {

    {ZOMBIE_WALK1_DIRECTORY, ZOMBIE_EATING_DIRECTORY},
    {ZOMBIE_WALK2_DIRECTORY, ZOMBIE_EATING_DIRECTORY},

    {ARMLESS_ZOMBIE_WALK1_DIRECTORY, ARMLESS_ZOMBIE_EATING_DIRECTORY},
    {ARMLESS_ZOMBIE_WALK2_DIRECTORY, ARMLESS_ZOMBIE_EATING_DIRECTORY},

    {FLAG_ZOMBIE_WALK1_1_DIRECTORY, FLAG_ZOMBIE_EATING_1_DIRECTORY},
    {FLAG_ZOMBIE_WALK1_2_DIRECTORY, FLAG_ZOMBIE_EATING_2_DIRECTORY},
    {FLAG_ZOMBIE_WALK1_3_DIRECTORY, FLAG_ZOMBIE_EATING_3_DIRECTORY},
    {FLAG_ZOMBIE_WALK2_1_DIRECTORY, FLAG_ZOMBIE_EATING_1_DIRECTORY},
    {FLAG_ZOMBIE_WALK2_2_DIRECTORY, FLAG_ZOMBIE_EATING_2_DIRECTORY},
    {FLAG_ZOMBIE_WALK2_3_DIRECTORY, FLAG_ZOMBIE_EATING_3_DIRECTORY},

    {DOOR_ZOMBIE_WALK1_1_DIRECTORY, DOOR_ZOMBIE_EATING_1_DIRECTORY},
    {DOOR_ZOMBIE_WALK1_2_DIRECTORY, DOOR_ZOMBIE_EATING_2_DIRECTORY},
    {DOOR_ZOMBIE_WALK1_3_DIRECTORY, DOOR_ZOMBIE_EATING_3_DIRECTORY},
    {DOOR_ZOMBIE_WALK2_1_DIRECTORY, DOOR_ZOMBIE_EATING_1_DIRECTORY},
    {DOOR_ZOMBIE_WALK2_2_DIRECTORY, DOOR_ZOMBIE_EATING_2_DIRECTORY},
    {DOOR_ZOMBIE_WALK2_3_DIRECTORY, DOOR_ZOMBIE_EATING_3_DIRECTORY}

};

int walk_of(const int &img_dir)
{
    switch (img_dir)
    {
    case ZOMBIE_EATING_DIRECTORY:
        return ZOMBIE_WALK_DIRECTORY;
    case ARMLESS_ZOMBIE_EATING_DIRECTORY:
        return ARMLESS_ZOMBIE_WALK_DIRECTORY;

    case FLAG_ZOMBIE_EATING_1_DIRECTORY:
        return FLAG_ZOMBIE_WALK_1_DIRECTORY;
    case FLAG_ZOMBIE_EATING_2_DIRECTORY:
        return FLAG_ZOMBIE_WALK_2_DIRECTORY;
    case FLAG_ZOMBIE_EATING_3_DIRECTORY:
        return FLAG_ZOMBIE_WALK_3_DIRECTORY;

    case DOOR_ZOMBIE_EATING_1_DIRECTORY:
        return DOOR_ZOMBIE_WALK_1_DIRECTORY;
    case DOOR_ZOMBIE_EATING_2_DIRECTORY:
        return DOOR_ZOMBIE_WALK_2_DIRECTORY;
    case DOOR_ZOMBIE_EATING_3_DIRECTORY:
        return DOOR_ZOMBIE_WALK_3_DIRECTORY;
    }
    cout << "NO WALK OF FOUND: " << img_dir << endl;
    return NULL_DIRECTORY;
}

int blink_of(const int &img_dir)
{
    if (blink_img.find(img_dir) != blink_img.end())
        return blink_img.at(img_dir);
    return NULL_DIRECTORY;
}

int eat_of(const int &img_dir)
{
    if (eat_img.find(img_dir) != eat_img.end())
        return eat_img.at(img_dir);
    return NULL_DIRECTORY;
}

Image::Image(string _dir)
{
    img_dir = _dir;
    n_sheet = 0;
    c_sheet = 0;
    alpha = 255;
}
Image::Image(string _dir, int _n, int _c)
{
    img_dir = _dir;
    n_sheet = _n;
    c_sheet = _c;
    alpha = 255;
}
Image::Image(string _dir, int _n, int _c, int _a)
{
    img_dir = _dir;
    n_sheet = _n;
    c_sheet = _c;
    alpha = _a;
}